#!/bin/bash


# TODO: Remove when dev is done
# Get stackname from notebook instance metadata to filter on Redshift stackname tag
stackname_path='/home/ec2-user/SageMaker/Redshift/assets/metadata/stackname.txt'
stackname_internal_path='/Users/bschur/RedshiftGoldStandard/scripts/stackname.txt'

if [ -f $stackname_internal_path ]; then
    stackname_path=$stackname_internal_path
    is_internal=true
fi

stackname=`head -n 1 $stackname_path`


if [  -z "$PGCONNECT_TIMEOUT"  ]; then 
	export PGCONNECT_TIMEOUT=10
fi

isIAM=true


if [[ "$*" == *'--no-iam'* ]] ; then 
	args="$*"
	cmd="/usr/bin/psql ${args//--no-iam/}"
    exec $cmd
	exit 0
else


# parse Redshift tags to pass to getclustercredentials.py
redshiftTags=$(aws redshift describe-clusters --tag-keys stack_name --tag-values $stackname --query 'Clusters[*].Tags[*]' | jq '.[][]')
userName=$(echo $redshiftTags | jq -r 'select(.Key == "master_user").Value')
cfmstack=$(echo $redshiftTags | jq -r 'select(.Key == "stack_name").Value')
shortuuid=$(echo $redshiftTags | jq -r 'select(.Key == "short_uuid").Value')
database=$(echo $redshiftTags | jq -r 'select(.Key == "db_name").Value')
port=$(echo $redshiftTags | jq -r 'select(.Key == "port").Value')
clusterIdentifier="$cfmstack-$shortuuid"


hostName=$(aws redshift describe-clusters --cluster-identifier $clusterIdentifier --query 'Clusters[*].Endpoint.Address' --output text)

# TODO: add checks if connection attributes changed versus tagging 
# TODO: Support all /usr/bin/psql arguments. Easiest to just strip away authentication parameters all of the time (except for --no-iam) and then just append arguments ( $* )
# will still need to ta still assign hostname arg to a variable for use in looking up cluster identifier 

                while [ "$#" -gt 0 ]; do
                  case "$1" in
                        -h) hostName="$2"; shift 2;;
                        -U) userName="$2"; shift 2;;
                        -d) database="$2"; shift 2;;
                        -p) port="$2"; shift 2;;
                        -f) file="$2"; shift 2;;
                        -c) cmd=""$2""; shift 2;;
                        -t) tuples="-t"; shift 1;;

                        --host=*) hostName="${1#*=}"; shift 1;;
                        --userName=*) userName="${1#*=}"; shift 1;;
                        --dbName=*) database="${1#*=}"; shift 1;;
                        --port=*) port="${1#*=}"; shift 1;;
                        --file=*) file="${1#*=}"; shift 1;;
                        --command=*) cmd=""${1#*=}""; shift 1;;
                        --tuples-only) tuples="-t"; shift 1;;
                        --host|--userName|--database|--port|--command|--tuples-only) echo "$1 requires an argument" >&2; exit 1;;

                        -*) echo "unknown option: $1" >&2; exit 1;;
                        #  other parameters get captured here  *) do whatever with $1; shift 1;;
                  esac
                done

clusterIdentifier=${hostName%%.*}

# TODO: Remove when dev is done
if [ "$is_internal" = true ]; then
    hostName='3.222.16.97'
    credstring=$(~/RedshiftGoldStandard/scripts/notebook/getclustercredentials.py $clusterIdentifier $userName $database)
else
    credstring=$(/home/ec2-user/SageMaker/derived-tpcds-tpch-benchmarks/scripts/getclustercredentials.py $clusterIdentifier $userName $database)
fi


IFS=' ' read -a arr <<< "$credstring"
iamUser=${arr[0]}
iampassword=${arr[1]}

                if [  "$iamUser" == "ERROR:"  ]; then
                        # print out error string passed from ClientError response
                        echo $credstring
                else
                        export PGPASSWORD=$iampassword

                        if [ -z "$file" ] && [ -z "$cmd" ]; then
                            /usr/bin/psql -h $hostName -p $port -d $database -U $iamUser $tuples
                        elif [ ! -z "$file" ]  && [ -z "$cmd" ]; then
                            /usr/bin/psql -h $hostName -p $port -d $database -U $iamUser --file="$file" $tuples
						elif [ -z "$file" ] && [ ! -z "$cmd" ]; then
                            /usr/bin/psql -h $hostName -p $port -d $database -U $iamUser --command="$cmd" $tuples 
						else
                            /usr/bin/psql -h $hostName -p $port -d $database -U $iamUser --command="$cmd" --file="$file" $tuples
						fi
                fi
fi
